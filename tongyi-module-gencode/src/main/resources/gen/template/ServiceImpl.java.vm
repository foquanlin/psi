/*
 * 项目名称:${projectName}
 * 类名称:${className}ServiceImpl.java
 * 包名称:${package}.service.impl
 * @author ${author}
 * @date ${datetime}
 * Copyright (c) 2019-2021 惠州市酷天科技有限公司
 */
package ${package}.service.impl;
import com.tongyi.core.PageInfo;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.tongyi.common.utils.Query;
import ${package}.dao.${className}Dao;
import ${package}.entity.${className}Entity;
import ${package}.service.${className}Service;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.io.Serializable;

/**
 * ${comments}Service实现类
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service("${classname}Service")
public class ${className}ServiceImpl extends ServiceImpl<${className}Dao, ${className}Entity> implements ${className}Service{

    @Override
    public ${className}Entity getById(Serializable id){
        return super.getById(id);
    }

    @Override
    public List<${className}Entity> listAll(Map<String, Object> params) {
        return super.baseMapper.listAll(params);
    }

    @Override
    public PageInfo<${className}Entity> listPage(int current, int size,Map<String, Object> params) {
        Page<${className}Entity> page = new Query<${className}Entity>(current,size,params).getPage();
        List<${className}Entity> list = super.baseMapper.listPage(page, params);
        return new PageInfo<${className}Entity>(page.getCurrent(),page.getSize(),page.getTotal()).setList(list);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean addEntity(${className}Entity entity) {
        return super.save(entity);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean updateEntity(${className}Entity entity) {
        return super.updateById(entity);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean deleteEntity(Serializable id) {
        return super.removeById(id);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean deleteBatch(Serializable[] ids) {
        return super.removeByIds(Arrays.asList(${pk.attrname}s));
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void execute(String id,ModuleExecute<${className}}Entity,Void> fun){
        Objects.requireNonNull(id);
        Objects.requireNonNull(fun);
        MallOrderEntity order = this.getById(id);
        this.execute(order,params,fun);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void execute(${className}}Entity module, ModuleExecute<${className}}Entity,Void> fun){
        Objects.requireNonNull(orderInfo);
        Objects.requireNonNull(fun);
        fun.apply(orderInfo,params);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void execute(${className}}Entity module, ModuleExecute<${className}}Entity,Void>... funs){
        Objects.requireNonNull(orderInfo);
        Objects.requireNonNull(funs);
        Arrays.stream(funs).forEach(fun->{
            fun.apply(orderInfo,params);
        });
    }
}
